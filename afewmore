#! /bin/bash

log() {
    if [[ $OPTION_VERB == true ]]; then
        echo "INFO:" $@
    fi
}

exit_with_error() {
    echo "ERROR:" $@
    exit 1
}

init_aws() {
    if [ $(whereis aws | wc -m) -lt 6 ]; then
        log "aws not installed, start installing now"
        sudo apt-get install awscli -y
    fi

    if [ $(aws --version 2>&1 | grep "unknown locale" | wc -m) -gt 0 ]; then
        echo -e "export LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8" >> ~/.bash_profile && source ~/.bash_profile
    fi

    log "aws" $(aws --version 2>&1 | awk -F '[/ ]' '{ print $2 }') "installed"

    if [[ $(cat ~/.aws 2>&1) != *"Is a directory"* ]]; then
      log "aws not configured, start configuring now"
      aws configure
    fi
}

get_master_info() {
    MASTER=$(aws ec2 describe-instances --instance-ids $OPTION_ID --query 'Reservations[*].Instances[*].{a:InstanceId, b:PrivateIpAddress, c:ImageId, d:InstanceType, e:SecurityGroups[0].GroupId, f:KeyName}' --output json)
    MASTER=$(echo $MASTER | tr -d '"[]{} ' | sed -E 's/[a-z]{1}://g')
    IFS=',' read -ra MASTER_CONFIG <<< "$MASTER"
    MASTER_ID=${MASTER_CONFIG[0]}
    MASTER_AMI=${MASTER_CONFIG[1]}
    MASTER_IP=${MASTER_CONFIG[2]}
    MASTER_SG=${MASTER_CONFIG[3]}
    MASTER_TYPE=${MASTER_CONFIG[4]}
    MASTER_KEY=${MASTER_CONFIG[5]}

    log "target instance id:" $MASTER_ID
    log "target instance ami:" $MASTER_AMI
    log "target instance private ip:" $MASTER_IP
    log "target instance security group id:" $MASTER_SG
    log "target instance image type:" $MASTER_TYPE
    log "target instance key name:" $MASTER_KEY
}

launch_slaves() {
    SLAVES=$(aws ec2 run-instances --image-id $MASTER_AMI --security-group-ids $MASTER_SG --count $OPTION_NUM --instance-type $MASTER_TYPE --key-name $MASTER_KEY --query 'Instances[*].{a: InstanceId, b: PrivateIpAddress}' --output json)
    SLAVES=$(echo $SLAVES | tr -d '"[]{ ' | sed -E 's/[a-z]{1}://g' | sed -E 's/\},/ /g' | tr -d '}')


    SLAVE_IDX=0
    for SLAVE in $SLAVES
    do
        IFS=',' read -ra SLAVE_INFO <<< "$SLAVE"
        SLAVE_IDS[$SLAVE_IDX]=${SLAVE_INFO[0]}
        SLAVE_IPS[$SLAVE_IDX]=${SLAVE_INFO[1]}

        if [[ $OPTION_VERB == true ]]; then
            log "new instance " ${SLAVE_IDS[$SLAVE_IDX]} "created"
        else
            echo ${SLAVE_IDS[$SLAVE_IDX]}
        fi

        ((SLAVE_IDX++))
    done
}

# main
# init_aws

# initial check
NUM_ARGS=$#
if [[ $NUM_ARGS < 1 ]]; then
    exit_with_error "no instance specified"
fi

# get options
OPTION_ID=${!NUM_ARGS}
OPTION_DIR="/data"
OPTION_NUM="10"
OPTION_VERB=false
OPTION_HELP=false

COUNT=$((NUM_ARGS-1))
PREV=""
for ARG in $@
do
    if [[ COUNT -lt 1 ]]; then
        break
    else
        ((COUNT--))
    fi

    if [[ $ARG == "-h" ]]; then
        OPTION_HELP=true
    elif [[ $ARG == "-v" ]]; then
        OPTION_VERB=true
    elif [[ $PREV == "-d" ]]; then
        if [[ $(echo $ARG | egrep "^~?(\/[^\/]+)+$" | wc -m) -gt 0 ]]; then
            OPTION_DIR=$ARG
        else
            exit_with_error "invalid directory \"$ARG\""
        fi
    elif [[ $PREV == "-n" ]]; then
        if [[ $(echo $ARG | egrep "^[0-9]+$" | wc -m) -gt 0 ]]; then
            OPTION_NUM=$ARG
        else
            exit_with_error "invalid number \"$ARG\""
        fi
    elif [[ $ARG != "-n" && $ARG != "-d" ]]; then
        exit_with_error "unknown option \"$ARG\""
    fi

    PREV=$ARG
done

if [[ $OPTION_HELP ]]; then
    curl -s https://www.cs.stevens.edu/~jschauma/615/afewmore.1.txt | more
    exit 0
fi

get_master_info
launch_slaves
#! /bin/bash

log() {
    if [[ $OPTION_VERB == true ]]; then
        echo -e "[\033[32mINFO\033[0m]" $@
    fi
}

exit_with_error() {
    echo -e "[\033[31mERROR\033[0m]" $@ >&2
    exit 1
}

get_master_info() {
    MASTER=$(aws ec2 describe-instances --instance-ids $OPTION_ID --query 'Reservations[*].Instances[*].{iid:InstanceId, ip:PrivateIpAddress, dns:PublicDnsName, ami:ImageId, itype:InstanceType, sg:SecurityGroups[0].GroupId, key:KeyName}' --output json)
    MASTER=$(echo $MASTER | tr -d '"[]{} ')
    MASTER=${MASTER//,/$'\n'}

    for MASTER_CONFIG in $MASTER
    do
        if [[ $MASTER_CONFIG == iid:* ]]; then
            MASTER_ID=$(echo $MASTER_CONFIG | sed 's/iid://g')
        elif [[ $MASTER_CONFIG == ami:* ]]; then
            MASTER_AMI=$(echo $MASTER_CONFIG | sed 's/ami://g')
        elif [[ $MASTER_CONFIG == dns:* ]]; then
            MASTER_DNS=$(echo $MASTER_CONFIG | sed 's/dns://g')
        elif [[ $MASTER_CONFIG == ip:* ]]; then
            MASTER_IP=$(echo $MASTER_CONFIG | sed 's/ip://g')
        elif [[ $MASTER_CONFIG == sg:* ]]; then
            MASTER_SG=$(echo $MASTER_CONFIG | sed 's/sg://g')
        elif [[ $MASTER_CONFIG == itype:* ]]; then
            MASTER_TYPE=$(echo $MASTER_CONFIG | sed 's/itype://g')
        elif [[ $MASTER_CONFIG == key:* ]]; then
            MASTER_KEY=$(echo $MASTER_CONFIG | sed 's/key://g')
        fi
    done

    log "target instance id:" $MASTER_ID
    log "target instance ami:" $MASTER_AMI
    log "target instance dns:" $MASTER_DNS
    log "target instance private ip:" $MASTER_IP
    log "target instance security group id:" $MASTER_SG
    log "target instance image type:" $MASTER_TYPE
    log "target instance key name:" $MASTER_KEY
}

launch_slaves() {
    SLAVES=$(aws ec2 run-instances --image-id $MASTER_AMI --security-group-ids $MASTER_SG --count $OPTION_NUM --instance-type $MASTER_TYPE --key-name $MASTER_KEY --query 'Instances[*].InstanceId')
    SLAVES=$(echo $SLAVES | tr -d '"[] ' | sed -E 's/,/ /g')

    # SLAVES="i-0fc437c36502ea14b i-0166ccf8d28f88719 i-09fe9cef405e2cd51 i-0c0dc474eeca26f71"

    SLAVE_IDX=0
    for SLAVE in $SLAVES
    do
        SLAVE_IDS[$SLAVE_IDX]=$SLAVE

        if [[ $OPTION_VERB == true ]]; then
            log "new instance " ${SLAVE_IDS[$SLAVE_IDX]} "created"
        else
            echo ${SLAVE_IDS[$SLAVE_IDX]}
        fi

        ((SLAVE_IDX++))
    done
}

get_slaves_dns() {
    DNSES=$(aws ec2 describe-instances --instance-ids $SLAVES --query 'Reservations[*].Instances[*].PublicDnsName')
    DNSES=$(echo $DNSES | tr -d '[]",')

    SLAVE_DNS_IDX=0
    for DNS in $DNSES
    do
        SLAVE_DNSES[$SLAVE_DNS_IDX]=$DNS

        if [[ $OPTION_VERB == true ]]; then
            log "obtained target dns " ${SLAVE_DNSES[$SLAVE_DNS_IDX]}
        fi

        ((SLAVE_DNS_IDX++))
    done
}

ping_slaves() {
    for DNS in $DNSES
    do
        SLAVE_STATUS=1
        while [[ $SLAVE_STATUS > 0 ]]; do
            log "pinging " $DNS
            SLAVE_STATUS=$(nc -z $DNS 22 2>&1 | echo $?)
        done

        log $DNS " is online"
    done
}

parse_dir() {
    OPTION_DIR=$(echo $OPTION_DIR | sed -E 's/\/$//g')
    OPTION_DIR_PARENT=$(echo "$OPTION_DIR/" | sed -E 's/\/[^\/]+\/$//g')

    if [[ ${#OPTION_DIR_PARENT} == 0 ]]; then
        OPTION_DIR_PARENT="/"
    fi

    if [[ $OPTION_DIR_PARENT != "/" ]]; then
        mkdir_on_slaves
    fi
}

mkdir_on_slaves() {
    for DNS in $DNSES
    do
        MKDIR_STATUS=$(ssh -o "StrictHostKeyChecking no" "ubuntu@$DNS" "sudo mkdir -p $OPTION_DIR_PARENT" 2>&1 | wc -m)
        
        if [[ $MKDIR_STATUS > 0 ]]; then
            log "failed to create directory \"$OPTION_DIR_PARENT\" on target $DNS"
        else
            log "created directory \"$OPTION_DIR_PARENT\" on target $DNS"
        fi
    done
}

# main

# initial check
NUM_ARGS=$#
if [[ $NUM_ARGS < 1 ]]; then
    exit_with_error "no instance specified"
fi

if [[ $(echo ${!NUM_ARGS} | egrep "^i-[0-9a-z]+$" | wc -m) -lt 1 ]]; then
    exit_with_error "invalid instance id \"${!NUM_ARGS}\""
fi

# get options
OPTION_ID=${!NUM_ARGS}
OPTION_DIR="/data"
OPTION_NUM="10"
OPTION_VERB=false
OPTION_HELP=false

COUNT=$((NUM_ARGS-1))
PREV=""
for ARG in $@
do
    if [[ COUNT -lt 1 ]]; then
        break
    else
        ((COUNT--))
    fi

    if [[ $(echo $ARG | egrep "^-" | wc -m) -gt 0 ]]; then
        if [[ $ARG == "-h" ]]; then
            OPTION_HELP=true
        elif [[ $ARG == "-v" ]]; then
            OPTION_VERB=true
        fi
    else
        if [[ $PREV == "-d" ]]; then
            if [[ $(echo $ARG | egrep "^~?(\/[^\/]*)+$" | wc -m) -gt 0 ]]; then
                OPTION_DIR=$ARG
            else
                exit_with_error "invalid directory \"$ARG\""
            fi
        elif [[ $PREV == "-n" ]]; then
            if [[ $(echo $ARG | egrep "^[0-9]+$" | wc -m) -gt 0 ]]; then
                OPTION_NUM=$ARG
            else
                exit_with_error "invalid number \"$ARG\""
            fi
        fi
    fi

    PREV=$ARG
done

if [[ $OPTION_HELP == true ]]; then
    curl -s https://www.cs.stevens.edu/~jschauma/615/afewmore.1.txt | more
    exit 0
fi

get_master_info
launch_slaves
get_slaves_dns
ping_slaves
parse_dir